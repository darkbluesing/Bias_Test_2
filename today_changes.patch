diff --git a/src/app/test/page.tsx b/src/app/test/page.tsx
index cb7b943..0ec1f73 100644
--- a/src/app/test/page.tsx
+++ b/src/app/test/page.tsx
@@ -14,7 +14,7 @@ import { LanguageSelector } from '@/components/ui/LanguageSelector';
 export default function TestPage() {
   const router = useRouter();
   const isHydrated = useHydration();
-  const { language, answers, setAnswer, currentQuestion, nextQuestion, previousQuestion, setResult, resetTest } = useBiasTestStore();
+  const { language, answers, submitAnswer, currentQuestion, nextQuestion, previousQuestion, setResult } = useBiasTestStore();
   const t = getTranslation(language);
 
   const [allQuestions, setAllQuestions] = useState(generateAllQuestions());
@@ -38,41 +38,35 @@ export default function TestPage() {
       alert(t.error.answerRequired);
       return;
     }
-
-    // 모든 질문에 답변했는지 확인
-    const allAnswered = answers.length === allQuestions.length && answers.every(a => a !== undefined);
-    if (!allAnswered) {
-      alert(t.error.testIncomplete);
-      return;
-    }
-
     const finalResult = calculateBias(answers);
     setResult(finalResult);
     router.push('/result');
   };
 
   if (!isHydrated) {
-    return <div>Loading...</div>;
+    return <div className="min-h-screen flex items-center justify-center">Loading...</div>;
   }
 
   const question = allQuestions[currentQuestion];
-  const progress = (currentQuestion / allQuestions.length) * 100;
+  const progress = ((currentQuestion + 1) / allQuestions.length) * 100;
+  const isFirstQuestion = currentQuestion === 0;
+  const isLastQuestion = currentQuestion === allQuestions.length - 1;
 
   return (
     <div className="min-h-screen bg-gray-100">
-      <main className="max-w-mobile mx-auto p-4">
-        <ProgressBar progress={progress} />
+      <main className="max-w-mobile mx-auto p-4 py-8">
+        <ProgressBar progress={progress} className="mb-8" />
         <QuestionCard 
           question={question}
           questionNumber={currentQuestion + 1}
           totalQuestions={allQuestions.length}
           selectedAnswer={answers[currentQuestion]}
-          onAnswerSelect={(answerIndex) => setAnswer(currentQuestion, answerIndex)}
+          onAnswerSelect={(answerIndex) => submitAnswer(answerIndex)}
           onNext={handleNext}
           onPrevious={previousQuestion}
           onSubmit={handleSubmit}
-          isFirstQuestion={currentQuestion === 0}
-          isLastQuestion={currentQuestion === allQuestions.length - 1}
+          isFirstQuestion={isFirstQuestion}
+          isLastQuestion={isLastQuestion}
           translations={t.test}
         />
       </main>
diff --git a/src/components/ui/QuestionCard.tsx b/src/components/ui/QuestionCard.tsx
index b7a8a8e..0c41cd4 100644
--- a/src/components/ui/QuestionCard.tsx
+++ b/src/components/ui/QuestionCard.tsx
@@ -3,75 +3,98 @@
 import { useState, useEffect } from 'react';
 import { Question } from '@/types';
 import { useBiasTestStore } from '@/lib/store';
+import { Button } from './Button';
 
 interface QuestionCardProps {
   question: Question;
-  onAnswer: (optionIndex: number) => void;
+  questionNumber: number;
+  totalQuestions: number;
   selectedAnswer?: number;
-  questionNumber?: number;
+  onAnswerSelect: (optionIndex: number) => void;
+  onNext: () => void;
+  onPrevious: () => void;
+  onSubmit: () => void;
+  isFirstQuestion: boolean;
+  isLastQuestion: boolean;
+  translations: { [key: string]: string };
   className?: string;
 }
 
-export function QuestionCard({ question, onAnswer, selectedAnswer, questionNumber, className = '' }: QuestionCardProps) {
+export function QuestionCard({ 
+  question, 
+  questionNumber,
+  selectedAnswer, 
+  onAnswerSelect,
+  onNext,
+  onPrevious,
+  onSubmit,
+  isFirstQuestion,
+  isLastQuestion,
+  translations,
+  className = '' 
+}: QuestionCardProps) {
   const { language } = useBiasTestStore();
-  
   const [selected, setSelected] = useState<number | undefined>(selectedAnswer);
 
-  // selectedAnswer가 변경될 때마다 로컬 상태 동기화
   useEffect(() => {
     setSelected(selectedAnswer);
   }, [selectedAnswer, question.id]);
 
   const handleOptionClick = (optionIndex: number) => {
-    console.log(`📝 QuestionCard ${question.id} 답변 선택: ${optionIndex}`);
-
-    // 중복 선택 방지
-    if (selected === optionIndex) {
-      console.log('⚠️ 동일한 답변 선택 - 무시');
-      return;
-    }
-    
-    // UI 상태 즉시 업데이트
     setSelected(optionIndex);
-    
-    // 상위 컴포넌트로 전달 (중복 방지는 상위에서 처리)
-    onAnswer(optionIndex);
+    onAnswerSelect(optionIndex);
   };
 
   return (
     <div className={className}>
-      {/* 메인 질문 컨테이너 - 확대된 크기 */}
-      <div className="bg-white rounded-xl shadow-lg p-8" style={{ minHeight: '500px' }}>
-        {/* 질문 번호와 제목 - 여백 축소 */}
-        <div className="mb-4">
-          <div className="flex items-start mb-3">
-            <span className="inline-flex items-center justify-center w-8 h-8 bg-pink-100 text-pink-600 rounded-full text-base font-bold mr-4 mt-1 flex-shrink-0">
-              {questionNumber || 1}
-            </span>
-            <h2 className="text-lg md:text-xl font-bold text-gray-900 leading-relaxed">
-              {question.text[language]}
-            </h2>
+      <div className="bg-white rounded-xl shadow-lg p-8" style={{ minHeight: '500px', display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>
+        <div>
+          <div className="mb-4">
+            <div className="flex items-start mb-3">
+              <span className="inline-flex items-center justify-center w-8 h-8 bg-pink-100 text-pink-600 rounded-full text-base font-bold mr-4 mt-1 flex-shrink-0">
+                {questionNumber}
+              </span>
+              <h2 className="text-lg md:text-xl font-bold text-gray-900 leading-relaxed">
+                {question.text[language]}
+              </h2>
+            </div>
           </div>
-        </div>
 
-        {/* 선택지 버튼들 - 일관된 간격 */}
-        <div className="space-y-3 mt-8">
-          {question.options.map((option, index) => (
-            <button
-              key={`${question.id}-${index}`}
-              onClick={() => handleOptionClick(index)}
-              className={`
-                w-full p-4 rounded-xl border-2 text-left font-medium text-base transition-all duration-200
-                ${
+          <div className="space-y-3 mt-8">
+            {question.options.map((option, index) => (
+              <button
+                key={`${question.id}-${index}`}
+                onClick={() => handleOptionClick(index)}
+                className={`w-full p-4 rounded-xl border-2 text-left font-medium text-base transition-all duration-200 ${
                   selected === index
                     ? 'bg-blue-50 border-blue-300 text-blue-800 shadow-md'
                     : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100 hover:border-gray-300'
-                }
-              `}
-            >
-              {option[language]}
-            </button>
-          ))}
+                }`}
+              >
+                {option[language]}
+              </button>
+            ))}
+          </div>
+        </div>
+
+        <div className="mt-8 flex items-center justify-between">
+          <Button 
+            onClick={onPrevious} 
+            disabled={isFirstQuestion}
+            variant="secondary"
+          >
+            {translations.previous}
+          </Button>
+
+          {isLastQuestion ? (
+            <Button onClick={onSubmit}>
+              {translations.submit}
+            </Button>
+          ) : (
+            <Button onClick={onNext}>
+              {translations.next}
+            </Button>
+          )}
         </div>
       </div>
     </div>
diff --git a/src/data/solutions.ts b/src/data/solutions.ts
index f76f72f..044fe73 100644
--- a/src/data/solutions.ts
+++ b/src/data/solutions.ts
@@ -55,4 +55,4 @@ export function getBiasCategory(percentage: number): BiasCategory {
     return percentage >= min && percentage <= max;
   });
   return category || biasSolutions[0];
-}
+}
\ No newline at end of file
